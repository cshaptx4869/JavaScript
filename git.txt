git笔记

1.自报家门
Git config --global user.name #你是谁
Git config --global user.email #怎么联系你
git config --list #查看git的配置情况

2.创建版本库
cd 路径
mkdir 文件名 #最好不要是中文,可能会出现问题
git init #初始化 .git隐藏文件 储存版本信息

3.添加文件
 git status #查看状态(红色 未提交 )
 git add 文件名 #3.1单个文件到缓存区
 git add . #添加多个文件到缓存区
 git commit -m "说明" #3.2一次性将暂存区的文件提交到本地仓库(版本库)
 git log #查看commit的信息
 git log --oneline #查看简化的日志

4.总结
工作区------>暂存区-------->版本库
 (红)	add   (绿)  commit

5.删除
git rm 文件名 #删除文件
git commit -m "删除文件啥啥" #提交

6.一次性提交(工作区-->版本库) 
git commit -am '说明' #跳过git add添加到暂存区 直接将工作区所有 已跟踪(已add过)的文件提交

7.撤销操作
git commit --amend #撤销上一次提交 并将现有的暂存区的文件重新提交(也可仅改变对内容的描述 即修改 -m 的"说明"部分)
git checkout 文件名 #修改工作区后,返回文件修改之前的状态
git checkout . #回复全部工作区文件的修改
git reset HEAD 文件名 #拉取最近一次提交的版本库的这个文件到暂存区,该操作不影响工作区(HEAD 是头指针)

8.删除文件
git rm 文件名 #删除工作区和暂存区的文件
git rm --cached 文件名 #仅仅删除暂存区的文件(一般用于删除不小心添加到暂存区的文件)
git rm -f 文件名

9.分支
git branch #查看分支
git branch 分支名 #创建分支
git checkout 分支名 #切换分支
git branch -d 分支名 #删除分支
git branch -m 旧名 新名
git checkout master #切换到主分支
git checkout -b 分支名 #新建并切换到分支
git merge 分支名 #合并分支(合并之前先切换到master分支,如果有相同部分会报错,需手动修改,在提交)
git diff #比较工作区与暂存区文件的差异
git diff --staged #比较暂存区与版本库的文件差异
git diff 版本号 版本号 #比较分之内的两个版本的差异 默认选择7个或8个
git diff 分支 分支 ..#比较两个分支的最新提交版本的差异

git stash #将文件保存到暂存区和工作区,不改变工作区文件
git stash list #查看提交的操作记录
git stash apply stash@{*} #后面不加名字则应用最近一次的储存信息
git stash drop stash@{*}  #git stash apply只是运用储存的信息,并不删除它,drop 命令可以删除它

10.git远程仓库GitHub
https协议/hhs协议]

git remote add origin git@github.com:用户名/远程仓库.git #用于建立本地仓库与github建立连接,origin是远程库的名字,可修改
git push -u origin master #推送 第一次推送加u,后续可简化不写 或 直接写成 git push
git clone git@github.com:用户名/远程仓库.git #克隆到本地

11.SSH警告
当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：

The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
RSA key fingerprint is xx.xx.xx.xx.xx.
Are you sure you want to continue connecting (yes/no)?

这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。

Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：

Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
这个警告只会出现一次，后面的操作就不会有任何警告了。

如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致。

12.把工作现场"储藏"起来
git stash #保存没有提交的变化,即把工作现场"储藏"起来,在查看工作区,就是干净的
git stash list #查看保存的状态
git stash apply #恢复,stash内容不删除,需用git stash drop删除
git stash pop #恢复的同时把stash内容也删除